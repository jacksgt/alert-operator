/*
Alertmanager API

API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alertmanagerapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AlertmanagerStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertmanagerStatus{}

// AlertmanagerStatus struct for AlertmanagerStatus
type AlertmanagerStatus struct {
	Cluster ClusterStatus `json:"cluster"`
	VersionInfo VersionInfo `json:"versionInfo"`
	Config AlertmanagerConfig `json:"config"`
	Uptime time.Time `json:"uptime"`
}

type _AlertmanagerStatus AlertmanagerStatus

// NewAlertmanagerStatus instantiates a new AlertmanagerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertmanagerStatus(cluster ClusterStatus, versionInfo VersionInfo, config AlertmanagerConfig, uptime time.Time) *AlertmanagerStatus {
	this := AlertmanagerStatus{}
	this.Cluster = cluster
	this.VersionInfo = versionInfo
	this.Config = config
	this.Uptime = uptime
	return &this
}

// NewAlertmanagerStatusWithDefaults instantiates a new AlertmanagerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertmanagerStatusWithDefaults() *AlertmanagerStatus {
	this := AlertmanagerStatus{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *AlertmanagerStatus) GetCluster() ClusterStatus {
	if o == nil {
		var ret ClusterStatus
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *AlertmanagerStatus) GetClusterOk() (*ClusterStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *AlertmanagerStatus) SetCluster(v ClusterStatus) {
	o.Cluster = v
}

// GetVersionInfo returns the VersionInfo field value
func (o *AlertmanagerStatus) GetVersionInfo() VersionInfo {
	if o == nil {
		var ret VersionInfo
		return ret
	}

	return o.VersionInfo
}

// GetVersionInfoOk returns a tuple with the VersionInfo field value
// and a boolean to check if the value has been set.
func (o *AlertmanagerStatus) GetVersionInfoOk() (*VersionInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionInfo, true
}

// SetVersionInfo sets field value
func (o *AlertmanagerStatus) SetVersionInfo(v VersionInfo) {
	o.VersionInfo = v
}

// GetConfig returns the Config field value
func (o *AlertmanagerStatus) GetConfig() AlertmanagerConfig {
	if o == nil {
		var ret AlertmanagerConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *AlertmanagerStatus) GetConfigOk() (*AlertmanagerConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *AlertmanagerStatus) SetConfig(v AlertmanagerConfig) {
	o.Config = v
}

// GetUptime returns the Uptime field value
func (o *AlertmanagerStatus) GetUptime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value
// and a boolean to check if the value has been set.
func (o *AlertmanagerStatus) GetUptimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uptime, true
}

// SetUptime sets field value
func (o *AlertmanagerStatus) SetUptime(v time.Time) {
	o.Uptime = v
}

func (o AlertmanagerStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertmanagerStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["versionInfo"] = o.VersionInfo
	toSerialize["config"] = o.Config
	toSerialize["uptime"] = o.Uptime
	return toSerialize, nil
}

func (o *AlertmanagerStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"versionInfo",
		"config",
		"uptime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertmanagerStatus := _AlertmanagerStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertmanagerStatus)

	if err != nil {
		return err
	}

	*o = AlertmanagerStatus(varAlertmanagerStatus)

	return err
}

type NullableAlertmanagerStatus struct {
	value *AlertmanagerStatus
	isSet bool
}

func (v NullableAlertmanagerStatus) Get() *AlertmanagerStatus {
	return v.value
}

func (v *NullableAlertmanagerStatus) Set(val *AlertmanagerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertmanagerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertmanagerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertmanagerStatus(val *AlertmanagerStatus) *NullableAlertmanagerStatus {
	return &NullableAlertmanagerStatus{value: val, isSet: true}
}

func (v NullableAlertmanagerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertmanagerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


