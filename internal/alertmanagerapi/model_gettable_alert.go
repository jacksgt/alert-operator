/*
Alertmanager API

API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alertmanagerapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GettableAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GettableAlert{}

// GettableAlert struct for GettableAlert
type GettableAlert struct {
	Labels map[string]string `json:"labels"`
	GeneratorURL *string `json:"generatorURL,omitempty"`
	Annotations map[string]string `json:"annotations"`
	Receivers []Receiver `json:"receivers"`
	Fingerprint string `json:"fingerprint"`
	StartsAt time.Time `json:"startsAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	EndsAt time.Time `json:"endsAt"`
	Status AlertStatus `json:"status"`
}

type _GettableAlert GettableAlert

// NewGettableAlert instantiates a new GettableAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGettableAlert(labels map[string]string, annotations map[string]string, receivers []Receiver, fingerprint string, startsAt time.Time, updatedAt time.Time, endsAt time.Time, status AlertStatus) *GettableAlert {
	this := GettableAlert{}
	this.Labels = labels
	this.Annotations = annotations
	this.Receivers = receivers
	this.Fingerprint = fingerprint
	this.StartsAt = startsAt
	this.UpdatedAt = updatedAt
	this.EndsAt = endsAt
	this.Status = status
	return &this
}

// NewGettableAlertWithDefaults instantiates a new GettableAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGettableAlertWithDefaults() *GettableAlert {
	this := GettableAlert{}
	return &this
}

// GetLabels returns the Labels field value
func (o *GettableAlert) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *GettableAlert) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetGeneratorURL returns the GeneratorURL field value if set, zero value otherwise.
func (o *GettableAlert) GetGeneratorURL() string {
	if o == nil || IsNil(o.GeneratorURL) {
		var ret string
		return ret
	}
	return *o.GeneratorURL
}

// GetGeneratorURLOk returns a tuple with the GeneratorURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetGeneratorURLOk() (*string, bool) {
	if o == nil || IsNil(o.GeneratorURL) {
		return nil, false
	}
	return o.GeneratorURL, true
}

// HasGeneratorURL returns a boolean if a field has been set.
func (o *GettableAlert) HasGeneratorURL() bool {
	if o != nil && !IsNil(o.GeneratorURL) {
		return true
	}

	return false
}

// SetGeneratorURL gets a reference to the given string and assigns it to the GeneratorURL field.
func (o *GettableAlert) SetGeneratorURL(v string) {
	o.GeneratorURL = &v
}

// GetAnnotations returns the Annotations field value
func (o *GettableAlert) GetAnnotations() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Annotations, true
}

// SetAnnotations sets field value
func (o *GettableAlert) SetAnnotations(v map[string]string) {
	o.Annotations = v
}

// GetReceivers returns the Receivers field value
func (o *GettableAlert) GetReceivers() []Receiver {
	if o == nil {
		var ret []Receiver
		return ret
	}

	return o.Receivers
}

// GetReceiversOk returns a tuple with the Receivers field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetReceiversOk() ([]Receiver, bool) {
	if o == nil {
		return nil, false
	}
	return o.Receivers, true
}

// SetReceivers sets field value
func (o *GettableAlert) SetReceivers(v []Receiver) {
	o.Receivers = v
}

// GetFingerprint returns the Fingerprint field value
func (o *GettableAlert) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *GettableAlert) SetFingerprint(v string) {
	o.Fingerprint = v
}

// GetStartsAt returns the StartsAt field value
func (o *GettableAlert) GetStartsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetStartsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartsAt, true
}

// SetStartsAt sets field value
func (o *GettableAlert) SetStartsAt(v time.Time) {
	o.StartsAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *GettableAlert) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *GettableAlert) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetEndsAt returns the EndsAt field value
func (o *GettableAlert) GetEndsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndsAt
}

// GetEndsAtOk returns a tuple with the EndsAt field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetEndsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndsAt, true
}

// SetEndsAt sets field value
func (o *GettableAlert) SetEndsAt(v time.Time) {
	o.EndsAt = v
}

// GetStatus returns the Status field value
func (o *GettableAlert) GetStatus() AlertStatus {
	if o == nil {
		var ret AlertStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GettableAlert) GetStatusOk() (*AlertStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GettableAlert) SetStatus(v AlertStatus) {
	o.Status = v
}

func (o GettableAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GettableAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labels"] = o.Labels
	if !IsNil(o.GeneratorURL) {
		toSerialize["generatorURL"] = o.GeneratorURL
	}
	toSerialize["annotations"] = o.Annotations
	toSerialize["receivers"] = o.Receivers
	toSerialize["fingerprint"] = o.Fingerprint
	toSerialize["startsAt"] = o.StartsAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["endsAt"] = o.EndsAt
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *GettableAlert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
		"annotations",
		"receivers",
		"fingerprint",
		"startsAt",
		"updatedAt",
		"endsAt",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGettableAlert := _GettableAlert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGettableAlert)

	if err != nil {
		return err
	}

	*o = GettableAlert(varGettableAlert)

	return err
}

type NullableGettableAlert struct {
	value *GettableAlert
	isSet bool
}

func (v NullableGettableAlert) Get() *GettableAlert {
	return v.value
}

func (v *NullableGettableAlert) Set(val *GettableAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableGettableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableGettableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGettableAlert(val *GettableAlert) *NullableGettableAlert {
	return &NullableGettableAlert{value: val, isSet: true}
}

func (v NullableGettableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGettableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


