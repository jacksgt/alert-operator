/*
Alertmanager API

API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alertmanagerapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GettableSilence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GettableSilence{}

// GettableSilence struct for GettableSilence
type GettableSilence struct {
	Matchers []Matcher `json:"matchers"`
	StartsAt time.Time `json:"startsAt"`
	EndsAt time.Time `json:"endsAt"`
	CreatedBy string `json:"createdBy"`
	Comment string `json:"comment"`
	Id string `json:"id"`
	Status SilenceStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _GettableSilence GettableSilence

// NewGettableSilence instantiates a new GettableSilence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGettableSilence(matchers []Matcher, startsAt time.Time, endsAt time.Time, createdBy string, comment string, id string, status SilenceStatus, updatedAt time.Time) *GettableSilence {
	this := GettableSilence{}
	this.Matchers = matchers
	this.StartsAt = startsAt
	this.EndsAt = endsAt
	this.CreatedBy = createdBy
	this.Comment = comment
	this.Id = id
	this.Status = status
	this.UpdatedAt = updatedAt
	return &this
}

// NewGettableSilenceWithDefaults instantiates a new GettableSilence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGettableSilenceWithDefaults() *GettableSilence {
	this := GettableSilence{}
	return &this
}

// GetMatchers returns the Matchers field value
func (o *GettableSilence) GetMatchers() []Matcher {
	if o == nil {
		var ret []Matcher
		return ret
	}

	return o.Matchers
}

// GetMatchersOk returns a tuple with the Matchers field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetMatchersOk() ([]Matcher, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matchers, true
}

// SetMatchers sets field value
func (o *GettableSilence) SetMatchers(v []Matcher) {
	o.Matchers = v
}

// GetStartsAt returns the StartsAt field value
func (o *GettableSilence) GetStartsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetStartsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartsAt, true
}

// SetStartsAt sets field value
func (o *GettableSilence) SetStartsAt(v time.Time) {
	o.StartsAt = v
}

// GetEndsAt returns the EndsAt field value
func (o *GettableSilence) GetEndsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndsAt
}

// GetEndsAtOk returns a tuple with the EndsAt field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetEndsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndsAt, true
}

// SetEndsAt sets field value
func (o *GettableSilence) SetEndsAt(v time.Time) {
	o.EndsAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *GettableSilence) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *GettableSilence) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetComment returns the Comment field value
func (o *GettableSilence) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *GettableSilence) SetComment(v string) {
	o.Comment = v
}

// GetId returns the Id field value
func (o *GettableSilence) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GettableSilence) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *GettableSilence) GetStatus() SilenceStatus {
	if o == nil {
		var ret SilenceStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetStatusOk() (*SilenceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GettableSilence) SetStatus(v SilenceStatus) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *GettableSilence) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *GettableSilence) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *GettableSilence) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o GettableSilence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GettableSilence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matchers"] = o.Matchers
	toSerialize["startsAt"] = o.StartsAt
	toSerialize["endsAt"] = o.EndsAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["comment"] = o.Comment
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *GettableSilence) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matchers",
		"startsAt",
		"endsAt",
		"createdBy",
		"comment",
		"id",
		"status",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGettableSilence := _GettableSilence{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGettableSilence)

	if err != nil {
		return err
	}

	*o = GettableSilence(varGettableSilence)

	return err
}

type NullableGettableSilence struct {
	value *GettableSilence
	isSet bool
}

func (v NullableGettableSilence) Get() *GettableSilence {
	return v.value
}

func (v *NullableGettableSilence) Set(val *GettableSilence) {
	v.value = val
	v.isSet = true
}

func (v NullableGettableSilence) IsSet() bool {
	return v.isSet
}

func (v *NullableGettableSilence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGettableSilence(val *GettableSilence) *NullableGettableSilence {
	return &NullableGettableSilence{value: val, isSet: true}
}

func (v NullableGettableSilence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGettableSilence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


