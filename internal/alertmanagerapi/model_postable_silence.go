/*
Alertmanager API

API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alertmanagerapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PostableSilence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostableSilence{}

// PostableSilence struct for PostableSilence
type PostableSilence struct {
	Matchers []Matcher `json:"matchers"`
	StartsAt time.Time `json:"startsAt"`
	EndsAt time.Time `json:"endsAt"`
	CreatedBy string `json:"createdBy"`
	Comment string `json:"comment"`
	Id *string `json:"id,omitempty"`
}

type _PostableSilence PostableSilence

// NewPostableSilence instantiates a new PostableSilence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostableSilence(matchers []Matcher, startsAt time.Time, endsAt time.Time, createdBy string, comment string) *PostableSilence {
	this := PostableSilence{}
	this.Matchers = matchers
	this.StartsAt = startsAt
	this.EndsAt = endsAt
	this.CreatedBy = createdBy
	this.Comment = comment
	return &this
}

// NewPostableSilenceWithDefaults instantiates a new PostableSilence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostableSilenceWithDefaults() *PostableSilence {
	this := PostableSilence{}
	return &this
}

// GetMatchers returns the Matchers field value
func (o *PostableSilence) GetMatchers() []Matcher {
	if o == nil {
		var ret []Matcher
		return ret
	}

	return o.Matchers
}

// GetMatchersOk returns a tuple with the Matchers field value
// and a boolean to check if the value has been set.
func (o *PostableSilence) GetMatchersOk() ([]Matcher, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matchers, true
}

// SetMatchers sets field value
func (o *PostableSilence) SetMatchers(v []Matcher) {
	o.Matchers = v
}

// GetStartsAt returns the StartsAt field value
func (o *PostableSilence) GetStartsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value
// and a boolean to check if the value has been set.
func (o *PostableSilence) GetStartsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartsAt, true
}

// SetStartsAt sets field value
func (o *PostableSilence) SetStartsAt(v time.Time) {
	o.StartsAt = v
}

// GetEndsAt returns the EndsAt field value
func (o *PostableSilence) GetEndsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndsAt
}

// GetEndsAtOk returns a tuple with the EndsAt field value
// and a boolean to check if the value has been set.
func (o *PostableSilence) GetEndsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndsAt, true
}

// SetEndsAt sets field value
func (o *PostableSilence) SetEndsAt(v time.Time) {
	o.EndsAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *PostableSilence) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *PostableSilence) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *PostableSilence) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetComment returns the Comment field value
func (o *PostableSilence) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *PostableSilence) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *PostableSilence) SetComment(v string) {
	o.Comment = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PostableSilence) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostableSilence) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PostableSilence) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PostableSilence) SetId(v string) {
	o.Id = &v
}

func (o PostableSilence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostableSilence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matchers"] = o.Matchers
	toSerialize["startsAt"] = o.StartsAt
	toSerialize["endsAt"] = o.EndsAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["comment"] = o.Comment
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *PostableSilence) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matchers",
		"startsAt",
		"endsAt",
		"createdBy",
		"comment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostableSilence := _PostableSilence{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostableSilence)

	if err != nil {
		return err
	}

	*o = PostableSilence(varPostableSilence)

	return err
}

type NullablePostableSilence struct {
	value *PostableSilence
	isSet bool
}

func (v NullablePostableSilence) Get() *PostableSilence {
	return v.value
}

func (v *NullablePostableSilence) Set(val *PostableSilence) {
	v.value = val
	v.isSet = true
}

func (v NullablePostableSilence) IsSet() bool {
	return v.isSet
}

func (v *NullablePostableSilence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostableSilence(val *PostableSilence) *NullablePostableSilence {
	return &NullablePostableSilence{value: val, isSet: true}
}

func (v NullablePostableSilence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostableSilence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


