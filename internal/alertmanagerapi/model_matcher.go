/*
Alertmanager API

API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alertmanagerapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Matcher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Matcher{}

// Matcher struct for Matcher
type Matcher struct {
	Name string `json:"name"`
	Value string `json:"value"`
	IsRegex bool `json:"isRegex"`
	IsEqual *bool `json:"isEqual,omitempty"`
}

type _Matcher Matcher

// NewMatcher instantiates a new Matcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatcher(name string, value string, isRegex bool) *Matcher {
	this := Matcher{}
	this.Name = name
	this.Value = value
	this.IsRegex = isRegex
	var isEqual bool = true
	this.IsEqual = &isEqual
	return &this
}

// NewMatcherWithDefaults instantiates a new Matcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatcherWithDefaults() *Matcher {
	this := Matcher{}
	var isEqual bool = true
	this.IsEqual = &isEqual
	return &this
}

// GetName returns the Name field value
func (o *Matcher) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Matcher) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Matcher) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *Matcher) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Matcher) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Matcher) SetValue(v string) {
	o.Value = v
}

// GetIsRegex returns the IsRegex field value
func (o *Matcher) GetIsRegex() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRegex
}

// GetIsRegexOk returns a tuple with the IsRegex field value
// and a boolean to check if the value has been set.
func (o *Matcher) GetIsRegexOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRegex, true
}

// SetIsRegex sets field value
func (o *Matcher) SetIsRegex(v bool) {
	o.IsRegex = v
}

// GetIsEqual returns the IsEqual field value if set, zero value otherwise.
func (o *Matcher) GetIsEqual() bool {
	if o == nil || IsNil(o.IsEqual) {
		var ret bool
		return ret
	}
	return *o.IsEqual
}

// GetIsEqualOk returns a tuple with the IsEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Matcher) GetIsEqualOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEqual) {
		return nil, false
	}
	return o.IsEqual, true
}

// HasIsEqual returns a boolean if a field has been set.
func (o *Matcher) HasIsEqual() bool {
	if o != nil && !IsNil(o.IsEqual) {
		return true
	}

	return false
}

// SetIsEqual gets a reference to the given bool and assigns it to the IsEqual field.
func (o *Matcher) SetIsEqual(v bool) {
	o.IsEqual = &v
}

func (o Matcher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Matcher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	toSerialize["isRegex"] = o.IsRegex
	if !IsNil(o.IsEqual) {
		toSerialize["isEqual"] = o.IsEqual
	}
	return toSerialize, nil
}

func (o *Matcher) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
		"isRegex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatcher := _Matcher{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatcher)

	if err != nil {
		return err
	}

	*o = Matcher(varMatcher)

	return err
}

type NullableMatcher struct {
	value *Matcher
	isSet bool
}

func (v NullableMatcher) Get() *Matcher {
	return v.value
}

func (v *NullableMatcher) Set(val *Matcher) {
	v.value = val
	v.isSet = true
}

func (v NullableMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatcher(val *Matcher) *NullableMatcher {
	return &NullableMatcher{value: val, isSet: true}
}

func (v NullableMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


