/*
Alertmanager API

API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alertmanagerapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PostableAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostableAlert{}

// PostableAlert struct for PostableAlert
type PostableAlert struct {
	Labels map[string]string `json:"labels"`
	GeneratorURL *string `json:"generatorURL,omitempty"`
	StartsAt *time.Time `json:"startsAt,omitempty"`
	EndsAt *time.Time `json:"endsAt,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
}

type _PostableAlert PostableAlert

// NewPostableAlert instantiates a new PostableAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostableAlert(labels map[string]string) *PostableAlert {
	this := PostableAlert{}
	this.Labels = labels
	return &this
}

// NewPostableAlertWithDefaults instantiates a new PostableAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostableAlertWithDefaults() *PostableAlert {
	this := PostableAlert{}
	return &this
}

// GetLabels returns the Labels field value
func (o *PostableAlert) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *PostableAlert) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *PostableAlert) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetGeneratorURL returns the GeneratorURL field value if set, zero value otherwise.
func (o *PostableAlert) GetGeneratorURL() string {
	if o == nil || IsNil(o.GeneratorURL) {
		var ret string
		return ret
	}
	return *o.GeneratorURL
}

// GetGeneratorURLOk returns a tuple with the GeneratorURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostableAlert) GetGeneratorURLOk() (*string, bool) {
	if o == nil || IsNil(o.GeneratorURL) {
		return nil, false
	}
	return o.GeneratorURL, true
}

// HasGeneratorURL returns a boolean if a field has been set.
func (o *PostableAlert) HasGeneratorURL() bool {
	if o != nil && !IsNil(o.GeneratorURL) {
		return true
	}

	return false
}

// SetGeneratorURL gets a reference to the given string and assigns it to the GeneratorURL field.
func (o *PostableAlert) SetGeneratorURL(v string) {
	o.GeneratorURL = &v
}

// GetStartsAt returns the StartsAt field value if set, zero value otherwise.
func (o *PostableAlert) GetStartsAt() time.Time {
	if o == nil || IsNil(o.StartsAt) {
		var ret time.Time
		return ret
	}
	return *o.StartsAt
}

// GetStartsAtOk returns a tuple with the StartsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostableAlert) GetStartsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartsAt) {
		return nil, false
	}
	return o.StartsAt, true
}

// HasStartsAt returns a boolean if a field has been set.
func (o *PostableAlert) HasStartsAt() bool {
	if o != nil && !IsNil(o.StartsAt) {
		return true
	}

	return false
}

// SetStartsAt gets a reference to the given time.Time and assigns it to the StartsAt field.
func (o *PostableAlert) SetStartsAt(v time.Time) {
	o.StartsAt = &v
}

// GetEndsAt returns the EndsAt field value if set, zero value otherwise.
func (o *PostableAlert) GetEndsAt() time.Time {
	if o == nil || IsNil(o.EndsAt) {
		var ret time.Time
		return ret
	}
	return *o.EndsAt
}

// GetEndsAtOk returns a tuple with the EndsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostableAlert) GetEndsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndsAt) {
		return nil, false
	}
	return o.EndsAt, true
}

// HasEndsAt returns a boolean if a field has been set.
func (o *PostableAlert) HasEndsAt() bool {
	if o != nil && !IsNil(o.EndsAt) {
		return true
	}

	return false
}

// SetEndsAt gets a reference to the given time.Time and assigns it to the EndsAt field.
func (o *PostableAlert) SetEndsAt(v time.Time) {
	o.EndsAt = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *PostableAlert) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostableAlert) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *PostableAlert) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *PostableAlert) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

func (o PostableAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostableAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labels"] = o.Labels
	if !IsNil(o.GeneratorURL) {
		toSerialize["generatorURL"] = o.GeneratorURL
	}
	if !IsNil(o.StartsAt) {
		toSerialize["startsAt"] = o.StartsAt
	}
	if !IsNil(o.EndsAt) {
		toSerialize["endsAt"] = o.EndsAt
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	return toSerialize, nil
}

func (o *PostableAlert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostableAlert := _PostableAlert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostableAlert)

	if err != nil {
		return err
	}

	*o = PostableAlert(varPostableAlert)

	return err
}

type NullablePostableAlert struct {
	value *PostableAlert
	isSet bool
}

func (v NullablePostableAlert) Get() *PostableAlert {
	return v.value
}

func (v *NullablePostableAlert) Set(val *PostableAlert) {
	v.value = val
	v.isSet = true
}

func (v NullablePostableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullablePostableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostableAlert(val *PostableAlert) *NullablePostableAlert {
	return &NullablePostableAlert{value: val, isSet: true}
}

func (v NullablePostableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


