/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SilenceSpec defines the desired state of Silence
type SilenceSpec struct {
	// TODO: CRD validation https://book.kubebuilder.io/reference/markers/crd-validation.html
	// TODO: MatchRegexes	

	// MatchLabels contains the set of labels (non-regexed) that this silence applies to.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
	// StartsAt contains the timestamp indicating at which time the silence began.
	StartsAt  metav1.Time `json:"startsAt,omitempty"`  // should be auto-filled
	// EndsAt contains the timestamp indicating at which time the silence ends.
	EndsAt    metav1.Time `json:"endsAt,omitempty"`    // provide go-duration input?
	// CreatedBy indicates the user who created the silence.
	CreatedBy string      `json:"createdBy,omitempty"` // creator
	// Comment contains additional information about the silence, e.g. the reason for it.
	Comment   string      `json:"comment,omitempty"`
}

// SilenceStatus defines the observed state of Silence
type SilenceStatus struct {
	// SilenceId is the unique identifier for this silence (generated by Alertmanager)
	SilenceId string `json:"silenceID,omitempty"`
	// Represents the observations of a Memcached's current state.
	// Memcached.status.conditions.type are: "Available", "Progressing", and "Degraded"
	// Memcached.status.conditions.status are one of True, False, Unknown.
	// Memcached.status.conditions.reason the value should be a CamelCase string and producers of specific
	// condition types may define expected values and meanings for this field, and whether the values
	// are considered a guaranteed API.
	// Memcached.status.conditions.Message is a human readable message indicating details about the transition.
	// For further information see: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

	Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// Silence is the Schema for the silences API
type Silence struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SilenceSpec   `json:"spec,omitempty"`
	Status SilenceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SilenceList contains a list of Silence
type SilenceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Silence `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Silence{}, &SilenceList{})
}
